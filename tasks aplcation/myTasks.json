[
    {
      "task_name": "Paramétrage des modèles de prix",
      "start_date": "09/07/2024",
      "finish_date": "11/07/2024",
      "development_days": 3,
      "task_description": "En tant qu'utilisateur, je souhaite paramétrer les modèles de prix par les attributs : identifiant, libellé, actif, méthode de valorisation de stock, permet le stock négatif et produit stockable (IHM CONFIG-MINIM).",
      "task_detailed_explanation": "Pour ce paramétrage, j'utiliserai Angular pour créer l'interface utilisateur. Je vais intégrer Mockoon pour simuler les appels API vers le backend, permettant ainsi d'obtenir et d'envoyer les données des modèles de prix. L'utilisateur pourra entrer les attributs requis dans des formulaires, et je vais m'assurer que les données sont validées avant d'être envoyées. Du côté backend, NestJS va gérer la logique de traitement des données, tandis que TypeORM sera utilisé pour interagir avec la base de données, permettant de sauvegarder ou de mettre à jour les modèles de prix.",
      "task_reference": "M02 + EP-02-01 + ST-02-01-01",
      "epic_name": "Gestion des données maîtresses d'inventaire",
      "module": "Gestion des stocks",
      "task_type": "front-end"
    },
    {
      "task_name": "Paramétrage des dimensions de stockage",
      "start_date": "10/07/2024",
      "finish_date": "11/07/2024",
      "development_days": 2,
      "task_description": "En tant qu'utilisateur, je souhaite paramétrer les modèles de dimensions de stockage par les attributs : identifiant, libellé, actif, site géographique, entrepôt, emplacement, article et objet de suivi (Coût ou Quantité) (IHM CONFIG-MINIM).",
      "task_detailed_explanation": "Cette tâche impliquera la création d'un formulaire dynamique dans Angular où l'utilisateur pourra entrer les détails des dimensions de stockage. Je vais utiliser Mockoon pour simuler l'API qui gérera les données en permettant de prévisualiser comment les informations seront traitées par le backend. Avec NestJS, je vais définir des routes pour traiter les requêtes liées aux dimensions de stockage et utiliser TypeORM pour les interactions avec la base de données afin d'assurer que les entrées utilisateur soient enregistrées correctement.",
      "task_reference": "M02 + EP-02-01 + ST-02-01-02",
      "epic_name": "Gestion des données maîtresses d'inventaire",
      "module": "Gestion des stocks",
      "task_type": "front-end"
    },
    {
      "task_name": "Paramétrage des dimensions de suivi",
      "start_date": "11/07/2024",
      "finish_date": "11/07/2024",
      "development_days": 1,
      "task_description": "En tant qu'utilisateur, je souhaite paramétrer les modèles de dimensions de suivi par les attributs : identifiant, libellé, actif, lot, série, palette, propriétaire, article et objet de suivi (Coût ou Quantité) (IHM CONFIG-MINIM).",
      "task_detailed_explanation": "Cette tâche nécessite la mise en place d'un autre formulaire dans Angular similaire à celui utilisé pour les dimensions de stockage. Je vais continuer à utiliser Mockoon pour simuler les réponses de l'API lors de l'enregistrement de ces dimensions de suivi. Avec NestJS, j'assurerai que la logique métier est en place pour valider les données avant leur stockage, et TypeORM sera utilisé pour gérer la persistance des données dans la base de données.",
      "task_reference": "M02 + EP-02-01 + ST-02-01-03",
      "epic_name": "Gestion des données maîtresses d'inventaire",
      "module": "Gestion des stocks",
      "task_type": "front-end"
    },
    {
      "task_name": "Consultation des bon de réception",
      "start_date": "17/07/2024",
      "finish_date": "29/07/2024",
      "development_days": 13,
      "task_description": "En tant que magasinier, je souhaite consulter une liste des entêtes de bon de réception, par bon de commande, dans un tableau de données.",
      "task_detailed_explanation": "Pour cette tâche, j'utiliserai Angular pour créer une vue qui affiche un tableau de données contenant les entêtes de bon de réception. Mockoon simulera le backend pour retourner les données des bons de réception, ce qui me permettra de tester l'affichage et l'interaction de l'utilisateur. Dans le backend, je vais implémenter une API avec NestJS pour récupérer les données, et TypeORM pour interagir avec la base de données, afin d'assurer que toutes les entrées sont correctement filtrées par bon de commande.",
      "task_reference": "M02 + EP-02-02 + ST-02-02-01",
      "epic_name": "Réception de produit",
      "module": "Gestion des stocks",
      "task_type": "front-end"
    },
    {
      "task_name": "Modification d'un bon de réception",
      "start_date": "17/07/2024",
      "finish_date": "29/07/2024",
      "development_days": 13,
      "task_description": "En tant qu’utilisateur, je souhaite afficher les informations de bon de réception dans un formulaire d'édition, où je peux modifier ou créer un nouvel bon de réception.",
      "task_detailed_explanation": "Je vais créer un formulaire d'édition dans Angular qui préremplit les informations d'un bon de réception existant lorsque l'utilisateur le sélectionne. Grâce à Mockoon, je vais simuler les appels API pour récupérer et soumettre les modifications des bons de réception. NestJS va gérer la logique pour vérifier les droits de l'utilisateur avant de permettre les modifications, et TypeORM sera utilisé pour mettre à jour les informations dans la base de données.",
      "task_reference": "M02 + EP-02-02 + ST-02-02-02",
      "epic_name": "Réception de produit",
      "module": "Gestion des stocks",
      "task_type": "front-end"
    },
    {
      "task_name": "Modification du statut d'un bon de réception",
      "start_date": "31/07/2024",
      "finish_date": "29/07/2024",
      "development_days": 0,
      "task_description": "En tant qu’utilisateur, je souhaite modifier le statut d’un bon de réception.",
      "task_detailed_explanation": "Pour cette tâche, je vais implémenter une fonctionnalité dans Angular qui permet à l'utilisateur de modifier le statut d'un bon de réception. Je vais créer un menu déroulant ou un ensemble de boutons radio pour sélectionner le nouveau statut. Avec Mockoon, je simulerai les appels API nécessaires pour envoyer la nouvelle valeur de statut au backend. NestJS s'occupera de la logique métier pour mettre à jour le statut dans la base de données via TypeORM.",
      "task_reference": "M02 + EP-02-02 + ST-02-02-03",
      "epic_name": "Réception de produit",
      "module": "Gestion des stocks",
      "task_type": "front-end"
    },
    {
      "task_name": "Consultation de la timeline des statuts",
      "start_date": "17/07/2024",
      "finish_date": "29/07/2024",
      "development_days": 13,
      "task_description": "En tant qu'utilisateur, je souhaite pouvoir consulter la timeline de changement de statuts de bon de réception.",
      "task_detailed_explanation": "Je vais créer une interface dans Angular qui affiche une timeline visuelle montrant l'historique des changements de statut pour chaque bon de réception. Je vais utiliser Mockoon pour fournir des données simulées sur l'historique des statuts. Le backend, développé avec NestJS, fournira une API pour récupérer ces informations, et TypeORM sera utilisé pour accéder à l'historique stocké dans la base de données.",
      "task_reference": "M02 + EP-02-02 + ST-02-02-04",
      "epic_name": "Réception de produit",
      "module": "Gestion des stocks",
      "task_type": "front-end"
    },
    {
      "task_name": "Consultation des lignes de commande",
      "start_date": "18/07/2024",
      "finish_date": "29/07/2024",
      "development_days": 11,
      "task_description": "En tant qu'utilisateur, je souhaite pouvoir consulter les lignes des bons de commande dans un tableau de données.",
      "task_detailed_explanation": "Cette tâche impliquera la création d'un tableau de données dans Angular pour afficher les lignes de bons de commande. J'utiliserai Mockoon pour simuler l'API qui retourne les données de commande. Le tableau permettra à l'utilisateur d'entrer la quantité reçue et de suivre les dimensions de suivi comme le lot et la série. NestJS gérera les appels API et TypeORM s'assurera que les données soient correctement récupérées et mises à jour dans la base de données.",
      "task_reference": "M02 + EP-02-02 + ST-02-02-05",
      "epic_name": "Réception de produit",
      "module": "Gestion des stocks",
      "task_type": "front-end"
    },
    {
      "task_name": "Consultation des informations générales",
      "start_date": "19/07/2024",
      "finish_date": "29/07/2024",
      "development_days": 10,
      "task_description": "En tant qu'utilisateur, je souhaite pouvoir consulter les informations générales (article, fournisseur, ligne de bon de réception, ligne de bon de commande).",
      "task_detailed_explanation": "Je vais mettre en place une vue dans Angular qui affiche les informations détaillées sur chaque ligne de bon de réception, y compris l'article et le fournisseur. Mockoon simulera l'API qui renverra ces données, tandis que NestJS traitera les requêtes et TypeORM sera utilisé pour accéder aux informations stockées dans la base de données.",
      "task_reference": "M02 + EP-02-02 + ST-02-02-06",
      "epic_name": "Réception de produit",
      "module": "Gestion des stocks",
      "task_type": "front-end"
    },
    {
      "task_name": "Sélection d'un lot pour un bon de réception",
      "start_date": "23/07/2024",
      "finish_date": "29/07/2024",
      "development_days": 6,
      "task_description": "En tant qu'utilisateur, je souhaite pouvoir sélectionner un lot et l'affecter à une ligne de bon de réception.",
      "task_detailed_explanation": "Pour cette tâche, je vais créer une sous-composante dans Angular qui permet à l'utilisateur de sélectionner un lot à partir d'une liste et de l'affecter à une ligne de bon de réception. Mockoon simulera les données des lots disponibles. Dans le backend, NestJS traitera la requête d'affectation du lot à la ligne, et TypeORM assurera que les modifications soient correctement mises à jour dans la base de données.",
      "task_reference": "M02 + EP-02-02 + ST-02-02-07",
      "epic_name": "Réception de produit",
      "module": "Gestion des stocks",
      "task_type": "front-end"
    },
    {
      "task_name": "Création d'un nouveau lot",
      "start_date": "23/07/2024",
      "finish_date": "29/07/2024",
      "development_days": 6,
      "task_description": "En tant qu'utilisateur, je souhaite créer un nouveau lot avec le DLC associé et une date de lancement automatique, par article.",
      "task_detailed_explanation": "Je vais créer un formulaire dans Angular permettant à l'utilisateur de saisir les informations nécessaires pour créer un nouveau lot, y compris le DLC et la date de lancement. Avec Mockoon, je vais simuler la réponse de l'API pour créer le lot. NestJS gérera la création de ce lot et TypeORM s'assurera que les données soient stockées dans la base de données.",
      "task_reference": "M02 + EP-02-02 + ST-02-02-08",
      "epic_name": "Réception de produit",
      "module": "Gestion des stocks",
      "task_type": "front-end"
    },
    {
      "task_name": "Consultation des mouvements de stock",
      "start_date": "26/07/2024",
      "finish_date": "03/08/2024",
      "development_days": 8,
      "task_description": "En tant que magasinier, je souhaite consulter une liste des entêtes de mouvement de stock par type de mouvement.",
      "task_detailed_explanation": "Pour cette tâche, je vais développer une interface dans Angular qui permet de visualiser les entêtes de mouvement de stock dans un tableau, filtrées par type de mouvement. Mockoon fournira les données simulées pour cette vue. NestJS sera chargé de traiter les requêtes d'affichage et TypeORM interagira avec la base de données pour récupérer les mouvements de stock.",
      "task_reference": "M02 + EP-02-04 + ST-02-04-01",
      "epic_name": "Mouvement de stock",
      "module": "Gestion des stocks",
      "task_type": "front-end"
    },
    {
      "task_name": "Modification d'un mouvement de stock",
      "start_date": "26/07/2024",
      "finish_date": "03/08/2024",
      "development_days": 8,
      "task_description": "En tant qu’utilisateur, je souhaite afficher les informations de mouvement de stock dans un formulaire d'édition.",
      "task_detailed_explanation": "Je vais créer un formulaire d'édition dans Angular qui affichera les détails d'un mouvement de stock sélectionné, permettant à l'utilisateur de le modifier. Mockoon simulera les réponses API pour la récupération et la soumission des modifications. NestJS gérera la logique de validation et de mise à jour, et TypeORM s'assurera que les modifications soient correctement enregistrées dans la base de données.",
      "task_reference": "M02 + EP-02-04 + ST-02-04-02",
      "epic_name": "Mouvement de stock",
      "module": "Gestion des stocks",
      "task_type": "front-end"
    },
    {
      "task_name": "Modification du statut d'un mouvement de stock",
      "start_date": "30/07/2024",
      "finish_date": "03/08/2024",
      "development_days": 4,
      "task_description": "En tant qu’utilisateur, je souhaite modifier le statut d’un mouvement de stock.",
      "task_detailed_explanation": "Pour cette tâche, je vais permettre à l'utilisateur de modifier le statut d'un mouvement de stock via un menu déroulant dans Angular. Je vais utiliser Mockoon pour simuler l'API qui gérera la mise à jour du statut. NestJS traitera la logique pour vérifier les conditions nécessaires avant d'appliquer les modifications, et TypeORM mettra à jour le statut dans la base de données.",
      "task_reference": "M02 + EP-02-04 + ST-02-04-03",
      "epic_name": "Mouvement de stock",
      "module": "Gestion des stocks",
      "task_type": "front-end"
    },
    {
      "task_name": "Consultation de la timeline des mouvements",
      "start_date": "03/08/2024",
      "finish_date": "03/08/2024",
      "development_days": 0,
      "task_description": "En tant qu'utilisateur, je souhaite pouvoir consulter la timeline de changement de statuts de mouvement de stock.",
      "task_detailed_explanation": "Je vais développer une vue dans Angular qui montre la timeline de l'historique des changements de statut pour chaque mouvement de stock. Mockoon fournira des données simulées pour cette timeline. Le backend, via NestJS, traitera les requêtes nécessaires pour obtenir ces informations, et TypeORM interagira avec la base de données pour récupérer l'historique des mouvements.",
      "task_reference": "M02 + EP-02-04 + ST-02-04-04",
      "epic_name": "Mouvement de stock",
      "module": "Gestion des stocks",
      "task_type": "front-end"
    },
    {
      "task_name": "Consultation des ajustements de stock",
      "start_date": "03/08/2024",
      "finish_date": "03/08/2024",
      "development_days": 0,
      "task_description": "En tant que magasinier, je souhaite consulter une liste des ajustements de stock par type d'ajustement.",
      "task_detailed_explanation": "Je vais créer une interface dans Angular qui affiche les ajustements de stock sous forme de tableau, triés par type d'ajustement. Mockoon simulera les réponses de l'API pour obtenir les ajustements. NestJS sera responsable de traiter les requêtes et TypeORM s'assurera que les ajustements de stock sont correctement récupérés à partir de la base de données.",
      "task_reference": "M02 + EP-02-04 + ST-02-04-05",
      "epic_name": "Ajustement de stock",
      "module": "Gestion des stocks",
      "task_type": "front-end"
    },
    {
      "task_name": "Création d'un ajustement de stock",
      "start_date": "03/08/2024",
      "finish_date": "03/08/2024",
      "development_days": 0,
      "task_description": "En tant qu’utilisateur, je souhaite créer un ajustement de stock avec les champs nécessaires.",
      "task_detailed_explanation": "Pour cette tâche, je vais développer un formulaire dans Angular permettant à l'utilisateur de saisir les détails d'un ajustement de stock. Mockoon fournira les données simulées lors de l'envoi de l'ajustement au backend. NestJS traitera la logique de création de l'ajustement, tandis que TypeORM mettra à jour la base de données avec les nouvelles informations.",
      "task_reference": "M02 + EP-02-04 + ST-02-04-06",
      "epic_name": "Ajustement de stock",
      "module": "Gestion des stocks",
      "task_type": "front-end"
    },
    {
      "task_name": "Consultation des retours de produits",
      "start_date": "04/08/2024",
      "finish_date": "04/08/2024",
      "development_days": 0,
      "task_description": "En tant que magasinier, je souhaite consulter une liste des retours de produits par type de retour.",
      "task_detailed_explanation": "Je vais créer une interface dans Angular qui permet à l'utilisateur de voir les retours de produits sous forme de tableau, triés par type de retour. Mockoon simulera les réponses de l'API pour récupérer ces données. NestJS traitera les requêtes pour obtenir les retours de produits, et TypeORM s'assurera que les données soient correctement récupérées de la base de données.",
      "task_reference": "M02 + EP-02-04 + ST-02-04-07",
      "epic_name": "Retour de produits",
      "module": "Gestion des stocks",
      "task_type": "front-end"
    },
    {
      "task_name": "Création d'un retour de produit",
      "start_date": "04/08/2024",
      "finish_date": "04/08/2024",
      "development_days": 0,
      "task_description": "En tant qu'utilisateur, je souhaite créer un retour de produit avec les champs nécessaires.",
      "task_detailed_explanation": "Pour cette tâche, je vais développer un formulaire dans Angular pour que l'utilisateur puisse entrer les détails d'un retour de produit. Mockoon simulera l'API lors de la soumission du retour. NestJS s'assurera que les informations soient correctement traitées et TypeORM mettra à jour la base de données pour enregistrer le retour.",
      "task_reference": "M02 + EP-02-04 + ST-02-04-08",
      "epic_name": "Retour de produits",
      "module": "Gestion des stocks",
      "task_type": "front-end"
    },
    {
      "task_name": "Consultation des inventaires",
      "start_date": "05/08/2024",
      "finish_date": "05/08/2024",
      "development_days": 0,
      "task_description": "En tant que magasinier, je souhaite consulter une liste des inventaires par type d'inventaire.",
      "task_detailed_explanation": "Je vais créer une interface dans Angular qui affiche les inventaires sous forme de tableau, triés par type d'inventaire. Mockoon simulera les réponses de l'API pour obtenir les informations sur les inventaires. NestJS gérera les requêtes et TypeORM interagira avec la base de données pour récupérer les données nécessaires.",
      "task_reference": "M02 + EP-02-04 + ST-02-04-09",
      "epic_name": "Gestion des inventaires",
      "module": "Gestion des stocks",
      "task_type": "front-end"
    },
    {
      "task_name": "Création d'un inventaire",
      "start_date": "05/08/2024",
      "finish_date": "05/08/2024",
      "development_days": 0,
      "task_description": "En tant qu'utilisateur, je souhaite créer un inventaire avec les champs nécessaires.",
      "task_detailed_explanation": "Pour cette tâche, je vais créer un formulaire dans Angular qui permet à l'utilisateur de saisir les détails de l'inventaire. Mockoon simulera l'API lors de la création de l'inventaire. NestJS s'assurera que les informations soient correctement traitées et TypeORM enregistrera les données dans la base de données.",
      "task_reference": "M02 + EP-02-04 + ST-02-04-10",
      "epic_name": "Gestion des inventaires",
      "module": "Gestion des stocks",
      "task_type": "front-end"
    },
    {
      "task_name": "Consultation des articles",
      "start_date": "06/08/2024",
      "finish_date": "06/08/2024",
      "development_days": 0,
      "task_description": "En tant qu'utilisateur, je souhaite consulter une liste des articles par type d'article.",
      "task_detailed_explanation": "Je vais créer une interface dans Angular qui affiche les articles disponibles dans un tableau, triés par type. Mockoon simulera les réponses de l'API pour récupérer les données des articles. NestJS traitera les requêtes et TypeORM interagira avec la base de données pour obtenir les informations sur les articles.",
      "task_reference": "M02 + EP-02-04 + ST-02-04-11",
      "epic_name": "Gestion des articles",
      "module": "Gestion des stocks",
      "task_type": "front-end"
    },
    {
      "task_name": "Consultation des fournisseurs",
      "start_date": "07/08/2024",
      "finish_date": "07/08/2024",
      "development_days": 0,
      "task_description": "En tant qu'utilisateur, je souhaite consulter une liste des fournisseurs par type de fournisseur.",
      "task_detailed_explanation": "Pour cette tâche, je vais développer une interface dans Angular qui affiche la liste des fournisseurs dans un tableau, triés par type. Mockoon simulera les réponses de l'API pour récupérer les données des fournisseurs. NestJS traitera les requêtes et TypeORM interagira avec la base de données pour obtenir les informations nécessaires.",
      "task_reference": "M02 + EP-02-04 + ST-02-04-12",
      "epic_name": "Gestion des fournisseurs",
      "module": "Gestion des stocks",
      "task_type": "front-end"
    },
    {
      "task_name": "Consultation des utilisateurs",
      "start_date": "08/08/2024",
      "finish_date": "08/08/2024",
      "development_days": 0,
      "task_description": "En tant qu'utilisateur, je souhaite consulter une liste des utilisateurs par rôle.",
      "task_detailed_explanation": "Je vais créer une interface dans Angular qui permet d'afficher les utilisateurs dans un tableau, triés par rôle. Mockoon simulera les réponses de l'API pour obtenir les données des utilisateurs. NestJS traitera les requêtes et TypeORM interagira avec la base de données pour récupérer les informations des utilisateurs.",
      "task_reference": "M02 + EP-02-04 + ST-02-04-13",
      "epic_name": "Gestion des utilisateurs",
      "module": "Gestion des stocks",
      "task_type": "front-end"
    },
    {
      "task_name": "Création d'un utilisateur",
      "start_date": "08/08/2024",
      "finish_date": "08/08/2024",
      "development_days": 0,
      "task_description": "En tant qu'administrateur, je souhaite créer un nouvel utilisateur avec les champs nécessaires.",
      "task_detailed_explanation": "Pour cette tâche, je vais développer un formulaire dans Angular qui permettra à l'administrateur de saisir les détails d'un nouvel utilisateur. Mockoon fournira des données simulées lors de la soumission du formulaire au backend. NestJS s'assurera que l'utilisateur soit créé correctement, et TypeORM enregistrera les informations dans la base de données.",
      "task_reference": "M02 + EP-02-04 + ST-02-04-14",
      "epic_name": "Gestion des utilisateurs",
      "module": "Gestion des stocks",
      "task_type": "front-end"
    },
    {
      "task_name": "Consultation des rôles",
      "start_date": "09/08/2024",
      "finish_date": "09/08/2024",
      "development_days": 0,
      "task_description": "En tant qu'administrateur, je souhaite consulter une liste des rôles disponibles.",
      "task_detailed_explanation": "Je vais créer une interface dans Angular qui affichera les rôles disponibles dans un tableau. Mockoon simulera les réponses de l'API pour obtenir les données sur les rôles. NestJS traitera les requêtes et TypeORM interagira avec la base de données pour récupérer les informations sur les rôles.",
      "task_reference": "M02 + EP-02-04 + ST-02-04-15",
      "epic_name": "Gestion des rôles",
      "module": "Gestion des stocks",
      "task_type": "front-end"
    },
    {
      "task_name": "Création d'un rôle",
      "start_date": "09/08/2024",
      "finish_date": "09/08/2024",
      "development_days": 0,
      "task_description": "En tant qu'administrateur, je souhaite créer un rôle avec les champs nécessaires.",
      "task_detailed_explanation": "Pour cette tâche, je vais développer un formulaire dans Angular permettant à l'administrateur de saisir les détails d'un nouveau rôle. Mockoon simulera les réponses de l'API lors de la création du rôle. NestJS s'assurera que le rôle soit créé correctement, et TypeORM mettra à jour la base de données avec les nouvelles informations.",
      "task_reference": "M02 + EP-02-04 + ST-02-04-16",
      "epic_name": "Gestion des rôles",
      "module": "Gestion des stocks",
      "task_type": "front-end"
    },
    {
      "task_name": "Consultation des paramètres",
      "start_date": "10/08/2024",
      "finish_date": "10/08/2024",
      "development_days": 0,
      "task_description": "En tant qu'administrateur, je souhaite consulter les paramètres de l'application.",
      "task_detailed_explanation": "Je vais créer une interface dans Angular qui affichera les paramètres de l'application dans un tableau. Mockoon simulera les réponses de l'API pour obtenir les données des paramètres. NestJS traitera les requêtes et TypeORM interagira avec la base de données pour récupérer les informations nécessaires.",
      "task_reference": "M02 + EP-02-04 + ST-02-04-17",
      "epic_name": "Gestion des paramètres",
      "module": "Gestion des stocks",
      "task_type": "front-end"
    },
    {
      "task_name": "Création de paramètres",
      "start_date": "10/08/2024",
      "finish_date": "10/08/2024",
      "development_days": 0,
      "task_description": "En tant qu'administrateur, je souhaite créer des paramètres avec les champs nécessaires.",
      "task_detailed_explanation": "Pour cette tâche, je vais développer un formulaire dans Angular qui permettra à l'administrateur de saisir les détails des paramètres. Mockoon simulera les réponses de l'API lors de la création des paramètres. NestJS s'assurera que les paramètres soient créés correctement, et TypeORM mettra à jour la base de données avec les nouvelles informations.",
      "task_reference": "M02 + EP-02-04 + ST-02-04-18",
      "epic_name": "Gestion des paramètres",
      "module": "Gestion des stocks",
      "task_type": "front-end"
    },
    {
      "task_name": "Consultation des sessions",
      "start_date": "11/08/2024",
      "finish_date": "11/08/2024",
      "development_days": 0,
      "task_description": "En tant qu'administrateur, je souhaite consulter les sessions actives.",
      "task_detailed_explanation": "Je vais créer une interface dans Angular qui affichera les sessions actives dans un tableau. Mockoon simulera les réponses de l'API pour obtenir les données des sessions. NestJS traitera les requêtes et TypeORM interagira avec la base de données pour récupérer les informations nécessaires.",
      "task_reference": "M02 + EP-02-04 + ST-02-04-19",
      "epic_name": "Gestion des sessions",
      "module": "Gestion des stocks",
      "task_type": "front-end"
    },
    {
      "task_name": "Création d'une session",
      "start_date": "11/08/2024",
      "finish_date": "11/08/2024",
      "development_days": 0,
      "task_description": "En tant qu'administrateur, je souhaite créer une session avec les champs nécessaires.",
      "task_detailed_explanation": "Pour cette tâche, je vais développer un formulaire dans Angular qui permettra à l'administrateur de créer une nouvelle session. Mockoon simulera les réponses de l'API lors de la création de la session. NestJS s'assurera que la session soit créée correctement, et TypeORM mettra à jour la base de données avec les nouvelles informations.",
      "task_reference": "M02 + EP-02-04 + ST-02-04-20",
      "epic_name": "Gestion des sessions",
      "module": "Gestion des stocks",
      "task_type": "front-end"
    },
    {
      "task_name": "Consultation des logs",
      "start_date": "12/08/2024",
      "finish_date": "12/08/2024",
      "development_days": 0,
      "task_description": "En tant qu'administrateur, je souhaite consulter les logs d'activité de l'application.",
      "task_detailed_explanation": "Je vais créer une interface dans Angular qui affichera les logs d'activité dans un tableau. Mockoon simulera les réponses de l'API pour obtenir les données des logs. NestJS traitera les requêtes et TypeORM interagira avec la base de données pour récupérer les informations nécessaires.",
      "task_reference": "M02 + EP-02-04 + ST-02-04-21",
      "epic_name": "Gestion des logs",
      "module": "Gestion des stocks",
      "task_type": "front-end"
    },
    {
      "task_name": "Consultation des alertes",
      "start_date": "13/08/2024",
      "finish_date": "13/08/2024",
      "development_days": 0,
      "task_description": "En tant qu'administrateur, je souhaite consulter les alertes d'activité de l'application.",
      "task_detailed_explanation": "Je vais créer une interface dans Angular qui affichera les alertes d'activité dans un tableau. Mockoon simulera les réponses de l'API pour obtenir les données des alertes. NestJS traitera les requêtes et TypeORM interagira avec la base de données pour récupérer les informations nécessaires.",
      "task_reference": "M02 + EP-02-04 + ST-02-04-22",
      "epic_name": "Gestion des alertes",
      "module": "Gestion des stocks",
      "task_type": "front-end"
    },
    {
      "task_name": "Consultation des rapports",
      "start_date": "14/08/2024",
      "finish_date": "14/08/2024",
      "development_days": 0,
      "task_description": "En tant qu'administrateur, je souhaite consulter les rapports d'activité de l'application.",
      "task_detailed_explanation": "Je vais créer une interface dans Angular qui affichera les rapports d'activité dans un tableau. Mockoon simulera les réponses de l'API pour obtenir les données des rapports. NestJS traitera les requêtes et TypeORM interagira avec la base de données pour récupérer les informations nécessaires.",
      "task_reference": "M02 + EP-02-04 + ST-02-04-23",
      "epic_name": "Gestion des rapports",
      "module": "Gestion des stocks",
      "task_type": "front-end"
    },
    {
      "task_name": "Gestion des notifications",
      "start_date": "15/08/2024",
      "finish_date": "15/08/2024",
      "development_days": 0,
      "task_description": "En tant qu'administrateur, je souhaite gérer les notifications de l'application.",
      "task_detailed_explanation": "Je vais créer une interface dans Angular qui permettra à l'administrateur de gérer les notifications. Mockoon simulera les réponses de l'API pour la gestion des notifications. NestJS traitera les requêtes et TypeORM interagira avec la base de données pour enregistrer les modifications.",
      "task_reference": "M02 + EP-02-04 + ST-02-04-24",
      "epic_name": "Gestion des notifications",
      "module": "Gestion des stocks",
      "task_type": "front-end"
    },
    {
      "task_name": "Consultation des configurations",
      "start_date": "16/08/2024",
      "finish_date": "16/08/2024",
      "development_days": 0,
      "task_description": "En tant qu'administrateur, je souhaite consulter les configurations de l'application.",
      "task_detailed_explanation": "Je vais créer une interface dans Angular qui affichera les configurations de l'application dans un tableau. Mockoon simulera les réponses de l'API pour obtenir les données de configuration. NestJS traitera les requêtes et TypeORM interagira avec la base de données pour récupérer les informations nécessaires.",
      "task_reference": "M02 + EP-02-04 + ST-02-04-25",
      "epic_name": "Gestion des configurations",
      "module": "Gestion des stocks",
      "task_type": "front-end"
    },
    {
      "task_name": "Gestion des droits d'accès",
      "start_date": "17/08/2024",
      "finish_date": "17/08/2024",
      "development_days": 0,
      "task_description": "En tant qu'administrateur, je souhaite gérer les droits d'accès des utilisateurs.",
      "task_detailed_explanation": "Je vais créer une interface dans Angular qui permettra à l'administrateur de gérer les droits d'accès des utilisateurs. Mockoon simulera les réponses de l'API pour la gestion des droits d'accès. NestJS traitera les requêtes et TypeORM interagira avec la base de données pour enregistrer les modifications.",
      "task_reference": "M02 + EP-02-04 + ST-02-04-26",
      "epic_name": "Gestion des droits d'accès",
      "module": "Gestion des stocks",
      "task_type": "front-end"
    },
    {
      "task_name": "Gestion des utilisateurs",
      "start_date": "18/08/2024",
      "finish_date": "18/08/2024",
      "development_days": 0,
      "task_description": "En tant qu'administrateur, je souhaite gérer les utilisateurs.",
      "task_detailed_explanation": "Je vais créer une interface dans Angular qui permettra à l'administrateur de gérer les utilisateurs. Mockoon simulera les réponses de l'API pour la gestion des utilisateurs. NestJS traitera les requêtes et TypeORM interagira avec la base de données pour enregistrer les modifications.",
      "task_reference": "M02 + EP-02-04 + ST-02-04-27",
      "epic_name": "Gestion des utilisateurs",
      "module": "Gestion des stocks",
      "task_type": "front-end"
    },
    {
      "task_name": "Gestion des sessions",
      "start_date": "19/08/2024",
      "finish_date": "19/08/2024",
      "development_days": 0,
      "task_description": "En tant qu'administrateur, je souhaite gérer les sessions.",
      "task_detailed_explanation": "Je vais créer une interface dans Angular qui permettra à l'administrateur de gérer les sessions. Mockoon simulera les réponses de l'API pour la gestion des sessions. NestJS traitera les requêtes et TypeORM interagira avec la base de données pour enregistrer les modifications.",
      "task_reference": "M02 + EP-02-04 + ST-02-04-28",
      "epic_name": "Gestion des sessions",
      "module": "Gestion des stocks",
      "task_type": "front-end"
    },
    {
      "task_name": "Gestion des notifications",
      "start_date": "20/08/2024",
      "finish_date": "20/08/2024",
      "development_days": 0,
      "task_description": "En tant qu'administrateur, je souhaite gérer les notifications.",
      "task_detailed_explanation": "Je vais créer une interface dans Angular qui permettra à l'administrateur de gérer les notifications. Mockoon simulera les réponses de l'API pour la gestion des notifications. NestJS traitera les requêtes et TypeORM interagira avec la base de données pour enregistrer les modifications.",
      "task_reference": "M02 + EP-02-04 + ST-02-04-29",
      "epic_name": "Gestion des notifications",
      "module": "Gestion des stocks",
      "task_type": "front-end"
    },
    {
      "task_name": "Mise à niveau de la fiche article",
      "start_date": "15/08/2024",
      "finish_date": "19/08/2024",
      "development_days": 4,
      "task_description": "Mise à niveau de la fiche article en rajoutant les modèles de prix, modèle de dimension de stockage, modèle de dimension de suivi. Ainsi qu’on supprimant l’affectation PRICEMODEL.",
      "task_reference": "M01 + EP-01-01 + ST-01-01-01",
      "epic_name": "Fiche Article",
      "module": "Master data management",
      "task_type": "back-end"
    },
    {
      "task_name": "Gestion des modèles de prix d’article",
      "start_date": "16/08/2024",
      "finish_date": "19/08/2024",
      "development_days": 3,
      "task_description": "Développement de gestion des modèles de prix d’article, en rajoutant ou désactivant un nouveau modèle.",
      "task_reference": "M01 + EP-01-01 + ST-01-01-02",
      "epic_name": "Fiche Article",
      "module": "Master data management",
      "task_type": "back-end"
    },
    {
      "task_name": "Gestion des modèles de dimension de stockage",
      "start_date": "17/08/2024",
      "finish_date": "19/08/2024",
      "development_days": 2,
      "task_description": "Développement de gestion des modèles de dimension de stockage, en rajoutant ou désactivant un nouveau modèle.",
      "task_reference": "M01 + EP-01-01 + ST-01-01-03",
      "epic_name": "Fiche Article",
      "module": "Master data management",
      "task_type": "back-end"
    },
    {
      "task_name": "Gestion des modèles de dimension de suivi",
      "start_date": "18/08/2024",
      "finish_date": "19/08/2024",
      "development_days": 1,
      "task_description": "Développement de gestion des modèles de dimension de suivi, en rajoutant ou désactivant un nouveau modèle.",
      "task_reference": "M01 + EP-01-01 + ST-01-01-04",
      "epic_name": "Fiche Article",
      "module": "Master data management",
      "task_type": "back-end"
    },
    {
      "task_name": "Suppression de composante de gestion des modèles de prix",
      "start_date": "19/08/2024",
      "finish_date": "26/08/2024",
      "development_days": 7,
      "task_description": "Suppression de composante de gestion des modèles de prix PRICEMODEL.",
      "task_reference": "M01 + EP-01-01 + ST-01-01-05",
      "epic_name": "Fiche Article",
      "module": "Master data management",
      "task_type": "back-end"
    },
    {
      "task_name": "Ajout d'un statut VALIDER pour les DA",
      "start_date": "26/08/2024",
      "finish_date": "28/08/2024",
      "development_days": 2,
      "task_description": "Ajouter un statut « VALIDER » entre les statuts « BROUILLON » et « EN COURS DE REVISION ». Les vérifications métier seront déplacées entre les « BROUILLON » et « VALIDER ».",
      "task_reference": "M02 + EP-02-01 + ST-02-01-01",
      "epic_name": "Purchase requisition",
      "module": "Procurement management",
      "task_type": "back-end"
    },
    {
      "task_name": "Gestion des statuts des lignes de DA",
      "start_date": "27/08/2024",
      "finish_date": "28/08/2024",
      "development_days": 1,
      "task_description": "Pour les lignes de DA ajouter la gestion des statuts de la même logique que l’entête de DA.",
      "task_reference": "M02 + EP-02-01 + ST-02-01-02",
      "epic_name": "Purchase requisition",
      "module": "Procurement management",
      "task_type": "back-end"
    },
    {
      "task_name": "Bouton pour passage du statut VALIDER à CLÔTURER",
      "start_date": "28/08/2024",
      "finish_date": "28/08/2024",
      "development_days": 0,
      "task_description": "Pour les entêtes de DA ajouter un bouton pour le passage du statut « VALIDER » à « CLÔTURER ».",
      "task_reference": "M02 + EP-02-01 + ST-02-01-03",
      "epic_name": "Purchase requisition",
      "module": "Procurement management",
      "task_type": "back-end"
    },
    {
      "task_name": "Clôture de DA",
      "start_date": "29/08/2024",
      "finish_date": "29/08/2024",
      "development_days": 0,
      "task_description": "Pour la clôture de DA, toutes ces lignes doivent être clôturées ou rejetées.",
      "task_reference": "M02 + EP-02-01 + ST-02-01-04",
      "epic_name": "Purchase requisition",
      "module": "Procurement management",
      "task_type": "back-end"
    }
  ]